* >Natural Source Header 000000
* :Mode S
* :CP IBM01140
* :LineIncrement 10
* <Natural Source Header
**SAG GENERATOR: CST-FRAME                        VERSION: 3.4.1
**SAG TITLE: CST Utility Frame Subp
**SAG SYSTEM: NATURAL-CONSTRUCT
**SAG DESCS(1): Examine/replace sensitive to double byte.
**SAG DATA-AREA: CSAEXAM
************************************************************************
* Program  : CSUEXAM
* System   : NATURAL-CONSTRUCT
* Title    : CST Utility Frame Subp
* Generated: Apr 23,96 at 02:57 PM
* Function : Examine/replace sensitive to double byte.
*
*
*
* History
**SAG DEFINE EXIT CHANGE-HISTORY
* Changed on Mar  7,96 by DEVAC for release ____
* >
* > Description: This subprogram recieves 1. an examine string,
* >                                       2. a scan string
* >                                       3. and one of ...
* >                                          a) a replace string
* >                                          b) DELETE option
* >                                          c) POSITION option
* >              It then issues the scan/replace, or gets the string
* >              position, with consideration of the SO/SI characters
* >              embedded into DBCS strings. All text within
* >              SO/SI characters are ignored.
* >
* >
**SAG END-EXIT
************************************************************************
DEFINE DATA
*
**SAG DEFINE EXIT PARAMETER-DATA
  PARAMETER USING CSAEXAM
**SAG END-EXIT
  PARAMETER USING CSASTD              /* Standard message passing area
  LOCAL USING CNAMSG                  /* Message retrieval passing area
  LOCAL USING CSLRCODE                /* Message return codes
  LOCAL USING CSADEFLT                /* Used to obtain default values
  LOCAL
  01 #PROGRAM(A8)
**SAG DEFINE EXIT LOCAL-DATA
  LOCAL
  /*
  /* Constants
  01 #MAX-ALPHA-LENGTH(I2) CONST<252>  /* Can't use 253 do to NAT bug.
                                       /* A253 requires ZAP 7050.
  /*
  /* Miscellaneous local variables (in aphabetic order).
  01 #DBCS(L)                    /* Is double byte handling necessary
  01 #EXAMINE
    02 START(I2) INIT<1>
  01 #I(I2)
  01 #LENGTH-ADJUSTMENT(I2)      /* Factor for size differences
  01 #NUMBER-OF-MATCHES(I2)      /* used by GIVING NUMBER clause
  01 #REPLACE
    02 START(I2) INIT<1>
    02 LENGTH(I2)
    02 POSITION(I2)
  01 #REPLACE-STRING-LENGTH(I2)
  01 #REPLACE-WITH-L(L)
  01 #SCAN-STRING-LENGTH(I2)
  01 #SI-LOCATION(I2)
  01 #SIZE-DIFFERENCE(I2)        /* Difference between scan/replace len
  01 #SO-LOCATION(I2)
  01 #VALUE(A10) INIT<'A'>       /* Any string to get SO/SI characters
  01 REDEFINE #VALUE
    02 #SO-CHAR(A1)
    02 FILLER(A2)
    02 #SI-CHAR(A1)
**SAG END-EXIT
END-DEFINE
*
PROG.   /* to allow escape from routine
REPEAT
*
INCLUDE CU--DFPR          /* Define printer
PERFORM INITIALIZATIONS
*
* Top of page to avoid having to use NOTITLE option
AT TOP OF PAGE(SRC)
  WRITE(SRC) NOTITLE '*/'
END-TOPPAGE
**SAG DEFINE EXIT START-OF-PROGRAM
*
RESET CSASTD.OUTPUTS CSAEXAM.OUTPUTS
**SAG END-EXIT
*
**SAG DEFINE EXIT GENERATE-CODE
  PERFORM VALIDATE-INPUT
*
* First determine whether SO/SI characters have been set.
  CALL 'CMMPP' 'SOSI' '+' #VALUE
*
* Now determine whether we need to consider DBCS logic
  DECIDE FOR FIRST CONDITION
    WHEN #VALUE.#SO-CHAR = #VALUE.#SI-CHAR /* SI/SO Not set
      IGNORE
    WHEN CSAEXAM.EXAMINE-WHAT NE SCAN #VALUE.#SO-CHAR /*SI/SO not in str
      IGNORE
    WHEN NONE
      ASSIGN #DBCS = TRUE
  END-DECIDE
*
  IF #DBCS THEN
    PERFORM EXAMINE-WITH-DBCS
  ELSE
    ASSIGN #REPLACE.LENGTH = #MAX-ALPHA-LENGTH
    PERFORM EXAMINE-DBCS-FREE-SUBSTRING
  END-IF
*
************************************************************************
DEFINE SUBROUTINE EXAMINE-WITH-DBCS
************************************************************************
*
* Determine length of scan string and replace string to compute
* adjustment of pointers after a replace operation.
  EXAMINE CSAEXAM.FOR-WHAT FOR ' '
          GIVING LENGTH #SCAN-STRING-LENGTH
  IF #SCAN-STRING-LENGTH = 0 THEN
    ASSIGN #SCAN-STRING-LENGTH = 1
  END-IF
  EXAMINE CSAEXAM.REPLACE-WITH FOR ' '
          GIVING LENGTH #REPLACE-STRING-LENGTH
  IF #REPLACE-STRING-LENGTH = 0 AND NOT CSAEXAM.DELETE THEN
    ASSIGN #REPLACE-STRING-LENGTH = 1
  END-IF
  COMPUTE #SIZE-DIFFERENCE = #REPLACE-STRING-LENGTH -
                                                   #SCAN-STRING-LENGTH
*
  REPLACE-ALL-LATIN-SUBSTRINGS.
  REPEAT
    EXAMINE SUBSTRING(CSAEXAM.EXAMINE-WHAT,#EXAMINE.START)
        FOR #VALUE.#SO-CHAR
        GIVING POSITION #SO-LOCATION
*
    DECIDE ON FIRST VALUE #SO-LOCATION
      VALUE 0 /* No shift out found
        ASSIGN #REPLACE.START = #EXAMINE.START
        COMPUTE #REPLACE.LENGTH = #MAX-ALPHA-LENGTH - #EXAMINE.START + 1
        PERFORM EXAMINE-DBCS-FREE-SUBSTRING
        ESCAPE BOTTOM(REPLACE-ALL-LATIN-SUBSTRINGS.) IMMEDIATE
      VALUE 1 /* First character
        IGNORE
      NONE    /* Replace latin before SO character
        ASSIGN #REPLACE.START = #EXAMINE.START
        COMPUTE #REPLACE.LENGTH = #SO-LOCATION - 1
        PERFORM EXAMINE-DBCS-FREE-SUBSTRING
        /*
        /* If we are only interested in the position, and we found the
        /* string, then we are done.
        IF CSAEXAM.POSITION-ONLY AND CSAEXAM.POSITION GT 0 THEN
          ESCAPE BOTTOM(REPLACE-ALL-LATIN-SUBSTRINGS.) IMMEDIATE
        END-IF
        /*
        /* Adjust for the fact that the scan/replace strings are of
        /* different lengths.
        COMPUTE #LENGTH-ADJUSTMENT = #SIZE-DIFFERENCE *
                                                    #NUMBER-OF-MATCHES
        ADD #LENGTH-ADJUSTMENT TO #EXAMINE.START
    END-DECIDE
    /*
    /* Skip over DBCS string.
    ADD #SO-LOCATION TO #EXAMINE.START /* Start searching after SO char
    EXAMINE SUBSTRING(CSAEXAM.EXAMINE-WHAT,#EXAMINE.START)
            FOR #VALUE.#SI-CHAR
            GIVING POSITION #SI-LOCATION
*
    IF #SI-LOCATION = 0 THEN /* Closing SI not found, ignore remainder
      ESCAPE BOTTOM(REPLACE-ALL-LATIN-SUBSTRINGS.) IMMEDIATE
    ELSE
      ADD #SI-LOCATION TO #EXAMINE.START /* Resume search after SI
    END-IF
    UNTIL #EXAMINE.START GT #MAX-ALPHA-LENGTH /* Reached end of string
  END-REPEAT /* REPLACE-ALL-LATIN-SUBSTRINGS.
END-SUBROUTINE /* EXAMINE-WITH-DBCS
*
************************************************************************
DEFINE SUBROUTINE EXAMINE-DBCS-FREE-SUBSTRING
************************************************************************
*
* If the scan/replace strings are the same length, use simple
* scan/replace over the specified SUBSTRING. Otherwise, find out how
* many hits there will be and do this many REPLACE FIRST operations
* stepping through to the END of the string.
* This is required to get the proper spacing and to avoid overflow
* of the substring variable.
  DECIDE FOR FIRST CONDITION
    WHEN CSAEXAM.POSITION-ONLY /* Position only required.
      EXAMINE
          SUBSTRING(CSAEXAM.EXAMINE-WHAT,#REPLACE.START,#REPLACE.LENGTH)
          FOR CSAEXAM.FOR-WHAT
          GIVING POSITION CSAEXAM.POSITION
      /*
      /* If text was found in the substring, adjust the position
      /* to reflect the start of the entire string.
      IF CSAEXAM.POSITION NE 0 THEN
        COMPUTE CSAEXAM.POSITION = CSAEXAM.POSITION + #REPLACE.START - 1
      END-IF
    WHEN #SCAN-STRING-LENGTH = #REPLACE-STRING-LENGTH
      EXAMINE
          SUBSTRING(CSAEXAM.EXAMINE-WHAT,#REPLACE.START,#REPLACE.LENGTH)
          FOR CSAEXAM.FOR-WHAT
          REPLACE WITH CSAEXAM.REPLACE-WITH
    WHEN NONE /* Scan/replace of different lengths, iterate through.
      EXAMINE
          SUBSTRING(CSAEXAM.EXAMINE-WHAT,#REPLACE.START,#REPLACE.LENGTH)
          FOR CSAEXAM.FOR-WHAT
          GIVING NUMBER #NUMBER-OF-MATCHES
      FOR #I = 1 TO #NUMBER-OF-MATCHES
        IF CSAEXAM.DELETE THEN
          EXAMINE SUBSTRING(CSAEXAM.EXAMINE-WHAT,#REPLACE.START)
              FOR CSAEXAM.FOR-WHAT
              DELETE FIRST
        ELSE
          EXAMINE SUBSTRING(CSAEXAM.EXAMINE-WHAT,#REPLACE.START)
              FOR CSAEXAM.FOR-WHAT
              REPLACE FIRST WITH CSAEXAM.REPLACE-WITH
              GIVING POSITION #REPLACE.POSITION
          /*
          /* Skip over the portion that was just replaced.
          COMPUTE #REPLACE.START = #REPLACE.START + #REPLACE.POSITION +
                                   #REPLACE-STRING-LENGTH - 1
        END-IF
      END-FOR
  END-DECIDE
END-SUBROUTINE /* EXAMINE-DBCS-FREE-SUBSTRING
*
***********************************************************************
DEFINE SUBROUTINE VALIDATE-INPUT
************************************************************************
*
* Make sure replace string, delete and position are mutually exclusive
  IF CSAEXAM.REPLACE-WITH NE ' ' THEN
    ASSIGN #REPLACE-WITH-L = TRUE
  END-IF
  IF SELECTION NOT UNIQUE #REPLACE-WITH-L
                          CSAEXAM.DELETE
                          CSAEXAM.POSITION-ONLY THEN
    ASSIGN CNAMSG.MSG-DATA(1) = '*0300.1'  /* Parameters
    ASSIGN CNAMSG.MSG-DATA(2) = 'REPLACE DELETE POSITION'
    ASSIGN CNAMSG.MSG-DATA(3) = *PROGRAM
    INCLUDE CU--SERR '0024'
      '''Invalid:1::2:passed to:3:'''
  END-IF
END-SUBROUTINE /* VALIDATE-INPUT
**SAG END-EXIT
*
************************************************************************
DEFINE SUBROUTINE CHECK-ERROR
************************************************************************
*
  DECIDE FOR FIRST CONDITION
    WHEN CSASTD.RETURN-CODE = CSLRCODE.#CONTINUE(*)
      IGNORE
    WHEN CSASTD.RETURN-CODE = CSLRCODE.#INTERRUPT(*)
      ESCAPE BOTTOM(PROG.) IMMEDIATE
    WHEN NONE
      IGNORE
  END-DECIDE
END-SUBROUTINE /* CHECK-ERROR
*
***********************************************************************
DEFINE SUBROUTINE GET-MESSAGE
***********************************************************************
*
* Retrieve message text and move to messaging data area
  PERFORM GET-MESSAGE-TEXT
  MOVE BY NAME CNAMSG TO CSASTD
END-SUBROUTINE /* GET-MESSAGE
*
***********************************************************************
DEFINE SUBROUTINE GET-MESSAGE-TEXT
***********************************************************************
*
* Call message retrieval and substitution module
  CALLNAT 'CNUMSG' CNAMSG CSASTD
  PERFORM CHECK-ERROR
END-SUBROUTINE /* GET-MESSAGE-TEXT
*
************************************************************************
DEFINE SUBROUTINE INITIALIZATIONS
************************************************************************
*
  ASSIGN #PROGRAM = *PROGRAM
*
END-SUBROUTINE /* INITIALIZATIONS
*
**SAG DEFINE EXIT END-OF-PROGRAM
**SAG END-EXIT
ESCAPE BOTTOM(PROG.) IMMEDIATE
END-REPEAT  /* PROG.
END
